#!/bin/sh
fail() {
    /bin/echo "Failed"
    /bin/echo "$1"
    exec /bin/sh
}

PATH=/sbin:/system/sbin:/system/bin:/bin:/system/xbin:/system/xbin/bb:/data/local/bin

/bin/echo "Rootfs loaded."

/bin/mount -t proc proc /proc
/bin/mount -t sysfs sys /sys

partition=mmcblk0p1

# Try unpartitioned card
if [ ! -e /sys/block/mmcblk0/$partition ] ; then
    partition=mmcblk0
fi

if [ -e /sys/class/vogue_hw/gsmphone ] ; then
    echo "GSM phone found"
fi

PARTITIONED=0

#mkdir -m 0777 /sdcard
#echo "Running an fsck on the SD card"
#dosfsck -y /dev/block/mmcblk0p1
mount -t vfat -o fmask=0000,dmask=0000,rw,flush,noatime,nodiratime /dev/block/$partition /sdcard
[ $? -eq 0 ] || fail "Failed to mount the SD card. Cannot continue."

if [ ! -d /sdcard/cache ] ; then
    mkdir /sdcard/cache
fi

#mkdir -m 0777 /cache
mount /sdcard/cache /cache

if [ -e /sdcard/data.gz ] ; then
    echo "Please wait... extracting Data Image"
    if [ $PARTITIONED = "0" ] ; then
        if [ -e /sdcard/data.img ] ; then
            rm /sdcard/data.img
        fi
        gzip -df /sdcard/data.gz
        [ $? -eq 0 ] || fail "Failed to extract Data Image"
        mv /sdcard/data /sdcard/data.img
    else
        gzip -cd /sdcard/data.gz > /dev/block/mmcblk0p2
        rm /sdcard/data.gz
    fi
    echo "done"
fi

if [ $PARTITIONED = "0" ] ; then
    if [ ! -e /sdcard/data.img ] ; then
        echo "Creating a new Data store"
        dd if=/dev/zero of=/sdcard/data.img bs=1048576 count=128
        [ $? -eq 0 ] || fail "Failed to allocate the storage"
        mke2fs -F /sdcard/data.img
        [ $? -eq 0 ] || fail "Failed to format the storage"
    fi
fi

#read -s -n1 -p "Press any key to start an automatic backup" -t 5
#if [ "$?" == "0" ] ; then
#	echo ""
#    echo "Starting Backup..."
#    if [ ! -d /sdcard/backup ] ; then
#        mkdir /sdcard/backup
#    fi
#    gzip -vc /sdcard/data.img > /sdcard/backup/data$(date +%Y-%m-%d).gz
#    echo "...Done!"
#else
#	echo ""
#fi

#mkdir -m 0755 /data
if [ $PARTITIONED = "0" ] ; then
    losetup /dev/block/loop0 /sdcard/data.img
    [ $? -eq 0 ] || fail "Failed to find data.img on SD Card"
    e2fsck -y /dev/block/loop0
    mount -t ext2 -o noatime,nodiratime,sync /dev/block/loop0 /data
else
    e2fsck -y /dev/block/mmcblk0p2
    mount -t ext2 -o noatime,nodiratime /dev/block/mmcblk0p2 /data
fi
[ $? -eq 0 ] || fail "Failed to mount /data"


#mkdir -m 0755 /system
if [ -e /sdcard/system.ext2 ] ; then
    echo "Using uncompressed system"
    losetup /dev/block/loop1 /sdcard/system.ext2
    [ $? -eq 0 ] || fail "Failed to reach system.ext2 on SD Card"
    e2fsck -y /dev/block/loop1
    mount -t ext2 -o ro,noatime,nodiratime /dev/block/loop1 /system
    [ $? -eq 0 ] || fail "Failed to mount /system"
elif [ -e /sdcard/system.sqsh ] ; then
    echo "Using SquashFS system"
    losetup /dev/block/loop1 /sdcard/system.sqsh
    [ $? -eq 0 ] || fail "Failed to find system.sqsh on SD Card"
    mount -t squashfs -o ro,noatime,nodiratime /dev/block/loop1 /system
    [ $? -eq 0 ] || fail "Failed to mount /system"
else
  losetup /dev/block/loop1 /sdcard/system.img
  [ $? -eq 0 ] || fail "Failed to find system.img on SD Card"
  mount -t cramfs -o ro,noatime,nodiratime /dev/block/loop1 /system
  [ $? -eq 0 ] || fail "Failed to mount /system"
fi


if [ -d /sdcard/AndroidApps ] ; then
    echo Copying Applications
    if [ ! -d /data/app ] ; then
        mkdir -m 0771 /data/app
    fi
    /bin/cp /sdcard/AndroidApps/* /data/app
    chown -R 1000:1000 /data/app
fi

if [ ! -d /sdcard/media ] ; then
    echo You have no media folder, please extract the resources to your SD card
fi


SQLITE3="/bin/sqlite3"
DB="/data/data/com.android.providers.telephony/databases/telephony.db"
if [ -e $DB ] ; then
    if [ "`$SQLITE3 $DB 'SELECT numeric FROM carriers;' | grep 310995`" != "310995" ] ; then
        echo Creating android apn
        "$SQLITE3" "$DB" "INSERT INTO carriers VALUES(NULL, 'Android' , '310995' , '310' , '995' , 'internet' , '*' , '*' , '*' , NULL, NULL, NULL, NULL, 'null' , 'default' , 1);"
    fi
else
    echo No telephony database. You must have a new data file. I will check for the android apn on the next reboot
fi

/bin/rm -rf /data/etc
/bin/mkdir -m 0755 /data/etc
mount /data/etc /etc
cp -a /system/etc/* /etc
cp -ar /initetc/* etc

LCDDENSITY=`/bin/grep -o "lcd.density=.*" /proc/cmdline | /bin/sed -e "s/.*lcd.density=//g" -e "s/ .*//g"`

if [ "$LCDDENSITY" != "" ] ; then
    echo "ro.sf.lcd_density=$LCDDENSITY" >> /etc/default.prop
    echo Setting ro.sf.lcd_density=$LCDDENSITY
fi

if [ ! -d /data/shared_prefs ] ; then
	mkdir -m 0770 /data/shared_prefs
fi
chmod 0770 /data/shared_prefs
chown 1000:1000 /data/shared_prefs
mount /data/shared_prefs /shared_prefs

mount /sdcard/cache /tmp

cp /system/build.prop /tmp/build.prop

### Is this a Kaiser?
if [ "`cat /proc/cpuinfo|grep -o Kaiser`" = "Kaiser" ]; then
	echo "KAISER detected"
        KAISER=1
	sed -i s/^#wifi/wifi/ /tmp/build.prop	
	if [ "`grep -c ^wifi /tmp/build.prop`" != "2" ]; then
	   echo "wifi.interface = tiwlan0" >> /tmp/build.prop
	   echo "wifi.supplicant_scan_interval = 45" >> /tmp/build.prop
	fi
	mount --bind /etc/wifi /system/lib/modules
elif [ "`cat /proc/cpuinfo|grep -o Polaris`" = "Polaris" ]; then
        echo "POLARIS detected"
        KAISER=1
        sed -i s/^#wifi/wifi/ /tmp/build.prop
        if [ "`grep -c ^wifi /tmp/build.prop`" != "2" ]; then
           echo "wifi.interface = tiwlan0" >> /tmp/build.prop
           echo "wifi.supplicant_scan_interval = 45" >> /tmp/build.prop
        fi
        mount --bind /etc/wifi /system/lib/modules
else
        echo "VOGUE detected"
        KAISER=0
	sed -i s/^wifi/#wifi/ /tmp/build.prop
fi
mount --bind /tmp/build.prop /system/build.prop

### Fix su on some builds...
mount --bind /bin/su /system/bin/su
mount --bind /bin/su /system/xbin/su


echo "Checking for hero..."
if [ -e /system/hero.build ] ; then
        echo "Hero build detected"
        if [ $KAISER = "1" ] ; then
                cp /init.hero.kaiser.rc /etc/init.rc
        else
                cp /init.hero.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/hero.user.conf
elif [ -e /system/rogers.build ] ; then
	echo "Rogers build detected"
        if [ $KAISER = "1" ] ; then
                cp /init.rogers.kaiser.rc /etc/init.rc
        else
                cp /init.rogers.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/rogers.user.conf
elif [ -e /system/xrom.build ] ; then
	echo "xROM build detected"
        if [ $KAISER = "1" ] ; then
                cp /init.xrom.kaiser.rc /etc/init.rc
        else
                cp /init.xrom.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/xrom.user.conf
elif [ -e /system/cyanogen.build ] ; then
	echo "cyanogen experimental detected.....eating donuts"
        if [ $KAISER = "1" ] ; then
                cp /init.cyanogen.kaiser.rc /etc/init.rc
        else
                cp /init.cyanogen.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/cyanogen.user.conf
elif [ -e /system/custom.build ] ; then
	echo "Custom init.rc detected"
        if [ $KAISER = "1" ] ; then
                cp /system/sysinit.kaiser.rc /etc/init.rc
        else
                cp /system/sysinit.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/hero.user.conf
else
	echo "Hero/Rogers builds not found. Assuming Ion variant"
        if [ $KAISER = "1" ] ; then
                cp /init.ion.kaiser.rc /etc/init.rc
        else
                cp /init.ion.rc /etc/init.rc
        fi
	/bin/userinit.sh -c /sdcard/ion.user.conf
fi

# echo /dev/block/mmcblk0p2 > /sys/devices/platform/usb_mass_storage/lun0/file
#ifconfig usb0 192.168.2.1 up
#telnetd -b 192.168.2.1
#chmod 4755 /bin/su
#mkdir -m 0777 /smodem
/bin/rm -rf /data/smodem
/bin/mkdir -m 0755 /data/smodem
mount /data/smodem /smodem
/bin/mknod -m 0777 /smodem/control p
exec /init1
